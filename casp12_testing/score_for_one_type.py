import math

#The following function receives a list generated by types_and_coordinates.py 
#and the type of amino acid (polar, hydrophobic, neg, pos, or special). It returns
#the score of that list for the type of amino acid provided:
def score_type_aa(list_residues, type_of_aa):
    '''Return score for one type of amino acyd given a types_and_coordinates.py list'''
    
    #Variable to store the obtained result (score):
    result_score = 0.0

    #Index to select each residue of residue of list_residues:
    i = 0    

    #For every residue in list_residues:
    while i < len(list_residues):
        #If the residue in question is of the type specified by type_of_aa:
        if list_residues[i][0] == type_of_aa:
            #Save the index of the residue in order not to make calculations
            #later on with itself:
            j = i
    
            #Another index to select each residue of  of list_residues:
            k = 0

           #For every residue in list_residues:
            while k < len(list_residues):
                #If the residue is not itself:
                if k != j:
                    #If the residue is of the type specified by type_of_aa:
                    if list_residues[k][0] == type_of_aa:
                        #Calculate the Euclidean distance between the centroid 
                        #of the rectangular 3D box of each of the pair of 
                        #residues (indexed by i and k, respectively):
                        euclid_dist = math.sqrt(((list_residues[i][1] - list_residues[k][1])**2) + ((list_residues[i][2] - list_residues[k][2])**2) + ((list_residues[i][3] - list_residues[k][3])**2))                         

                        #Update result_score:
                        result_score = result_score + (1 / (euclid_dist**2))


                #Proceed to next residue:
                k += 1
            
        #Proceed to next residue:
        i += 1


    #Return result:
    return(result_score)



